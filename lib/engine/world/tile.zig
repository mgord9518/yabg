const std = @import("std");

const rl = @import("raylib");
const engine = @import("../../engine.zig");

// TODO: type check ID
pub fn Tile(IdType: type, ItemIdType: type) type {
    return packed struct(u16) {
        const Engine = engine.engine(IdType, ItemIdType);

        const Self = @This();
        pub const size = engine.world.tile_size;

        var callbacks: [256]?*const fn (*Self, *Engine.Player) void = .{ null } ** 256;

        // 8 bits
        id: Id,

        // If the tile was generated by the game through world generation, this
        // will be true, if placed by a player, it will be false
        naturally_generated: bool = false,

        // The `grade` of a material. This could mean very different things depending
        // on the tile in question. If a grass tile, this could mean how tall the
        // grass is and what seeds it contains. If an ore, it could dictate how
        // much metal you'll get from it
        grade: u2 = 0,

        // The remaining hitpoints of the tile
        hp: u3 = 3,

        // Reserved
        _14: u2 = undefined,

        pub const Options = struct {
            id: Id,
            naturally_generated: bool = false,
            grade: u2 = 0,
            damage: u3 = 0,
        };

        pub fn init(opts: Options) Self {
            return .{
                .id = opts.id,
                .naturally_generated = opts.naturally_generated,
                .grade = opts.grade,
                .damage = opts.damage,
            };
        }

        pub fn texture(self: *const Self) engine.Texture {
            return engine.textures.tiles[@intFromEnum(self.id)];
        }

        pub fn sound(self: *const Self) engine.Sound {
            return engine.tileSounds[@intFromEnum(self.id)];
        }

        pub fn playSound(self: *const Self) void {
            const snd = self.sound();

            engine.playSound(snd);
        }

        pub fn setCallback(id: Id, cb: *const fn (*Self, *Engine.Player) void) void {
            callbacks[@intFromEnum(id)] = cb;
        }

        pub fn callback(self: *Self, entity: *Engine.Player) void {
            if (callbacks[@intFromEnum(self.id)]) |cb| {
                cb(self, entity);
            }
        }

        pub const Id = IdType;
    };
}
