const std = @import("std");

const rl = @import("raylib");
const engine = @import("../../engine.zig");

// TODO: type check ID
pub fn Tile(IdType: type) type {
    return packed struct(u16) {
        const Self = @This();
        pub const size = engine.world.tile_size;

        // 8 bits
        id: Id,

        // If the tile was generated by the game through world generation, this
        // will be true, if placed by a player, it will be false
        naturally_generated: bool = false,

        // The `grade` of a material. This could mean very different things depending
        // on the tile in question. If a grass tile, this could mean how tall the
        // grass is and what seeds it contains. If an ore, it could dictate how
        // much metal you'll get from it
        grade: u2 = 0,

        // The damage level of the tile. This can be caused by player mining,
        // explosions, etc.
        damage: u3 = 0,

        // Reserved
        _14: u2 = undefined,

        pub const Options = struct {
            id: Id,
            naturally_generated: bool = false,
            grade: u2 = 0,
            damage: u3 = 0,
        };

        pub fn init(opts: Options) Self {
            return .{
                .id = opts.id,
                .naturally_generated = opts.naturally_generated,
                .grade = opts.grade,
                .damage = opts.damage,
            };
        }

        pub fn texture(self: *const Self) engine.Texture {
            return engine.textures.tiles[@intFromEnum(self.id)];
        }

        pub fn sound(self: *const Self) engine.Sound {
            return engine.tileSounds[@intFromEnum(self.id)];
        }

        pub fn playSound(self: *const Self) void {
            const snd = self.sound();

            engine.playSound(snd);
        }

        pub const Id = IdType;
    };
}

pub const Tilee = packed struct(u16) {
    pub const size = 12;

    // 8 bits
    id: Id,

    // If the tile was generated by the game through world generation, this
    // will be true, if placed by a player, it will be false
    naturally_generated: bool = false,

    // The `grade` of a material. This could mean very different things depending
    // on the tile in question. If a grass tile, this could mean how tall the
    // grass is and what seeds it contains. If an ore, it could dictate how
    // much metal you'll get from it
    grade: u2 = 0,

    // The damage level of the tile. This can be caused by player mining,
    // explosions, etc.
    damage: u3 = 0,

    // Reserved
    _14: u2 = undefined,

    pub const Options = struct {
        id: Id,
        naturally_generated: bool = false,
        grade: u2 = 0,
        damage: u3 = 0,
    };

    pub fn init(opts: Options) Tile {
        return Tile{
            .id = opts.id,
            .naturally_generated = opts.naturally_generated,
            .grade = opts.grade,
            .damage = opts.damage,
        };
    }

    pub fn texture(self: *const Tile) engine.Texture {
        return engine.textures.tiles[@intFromEnum(self.id)];
    }

    pub fn sound(self: *const Tile) engine.Sound {
        return engine.tileSounds[@intFromEnum(self.id)];
    }

    pub fn playSound(self: *const Tile) void {
        const snd = self.sound();

        engine.playSound(snd);
    }

    /// Categories should denote the basic qualities of a specific tile.
    /// While different submaterials (eg: grass and sand or cobblestone and brick)
    /// may have different hardnesses and sound, they're still collected with the
    /// same type of tool
    pub const Id = enum(u8) {
        air = 0,

        // Various kinds of soil, sand, gravel, etc.
        dirt = 8,
        grass,
        sand,

        // Logs, planks, bamboo
        //wood = 16,

        // Cobblestone, smooth stone, bricks, ore
        stone = 32,

        //metal = 48,

        // Computers, wires, machines
        //electronic = 64,

        water = 80,

        //misc = 240,

        // Tile dedicated to the `placeholder` texture
        placeholder = 255,

        pub fn texture(self: Id) engine.Texture {
            return engine.textures.tiles[@intFromEnum(self)];
        }

        pub fn sound(self: Id) engine.Sound {
            return engine.tileSounds[@intFromEnum(self)];
        }
    };
};
